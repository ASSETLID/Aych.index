# -*- makefile -*-
LIB = ocp-index-lib

VERSION := $(shell awk -F'[(,)]' '/AC_INIT/ { print $$3 }' configure.ac)

OCAMLBUILD = ocamlbuild -pkg compiler-libs.common -pkg ocp-indent-lib -use-ocamlfind

UNAME := $(shell uname)
ifeq (WIN,$(findstring WIN,$(UNAME)))
  EXEEXT := .exe
else
  EXEEXT :=
endif

all: $(LIB).cma $(LIB).cmxa

ALWAYS:

%.cma: ALWAYS $(GENERATED)
	$(OCAMLBUILD) src/$@

%.cmxa: ALWAYS $(GENERATED)
	$(OCAMLBUILD) src/$@

HAS_CMDLINER := \
	$(shell ocamlfind query cmdliner >/dev/null 2>&1 \
	&& echo yes || echo no)
CMDLINER_DEP = $(if $(HAS_CMDLINER) = no,-I cmdliner,-pkg cmdliner)

.PHONY:cmdliner-dep
cmdliner-dep:
	if [ "$(HAS_CMDLINER)" = "no" ]; then \
	  cp -rf ../cmdliner/src cmdliner; \
	fi

ocp-index$(EXEEXT): ALWAYS cmdliner-dep
	$(OCAMLBUILD) -pkg unix $(CMDLINER_DEP) -I src src/indexMain.native
	cp _build/src/indexMain.native $@

.PHONY: clean
clean:
	rm -rf META _build

_build/src/META:
	mkdir -p _build/src
	echo 'version = "'$(VERSION)'"' > $@
	echo 'archive(byte) = "'$(LIB)'.cma"' >> $@
	echo 'archive(native) = "'$(LIB)'.cmxa"' >> $@
	echo 'requires = "compiler-libs compiler-libs.common"' >> $@

INTERFACES = libIndex indexScope

.PHONY: install
install: _build/src/META $(LIB).cma $(LIB).cmxa
	ocamlfind remove ${LIB} || true
	cd _build/src && ocamlfind install $(LIB) META \
	  $(INTERFACES:=.cmi) \
	  $(LIB).cma $(LIB).cmxa $(LIB).a
